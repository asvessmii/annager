import sqlite3

DATABASE_NAME = "bot_data.db"

def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            current_question INTEGER DEFAULT 0,
            score INTEGER DEFAULT 0,
            completed INTEGER DEFAULT 0,
            last_result TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            message_id TEXT PRIMARY KEY,
            text TEXT,
            photo_path TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS buttons (
            button_id INTEGER PRIMARY KEY AUTOINCREMENT,
            message_id TEXT,
            text TEXT,
            url TEXT,
            callback_data TEXT,
            FOREIGN KEY (message_id) REFERENCES messages (message_id)
        )
    """)
    
    # Add new columns if they don't exist (for existing databases)
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN completed INTEGER DEFAULT 0")
    except sqlite3.OperationalError:
        pass  # Column already exists
    
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN last_result TEXT")
    except sqlite3.OperationalError:
        pass  # Column already exists
    
    conn.commit()
    conn.close()
    populate_initial_messages()

def populate_initial_messages():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    # Check if data already exists
    cursor.execute("SELECT COUNT(*) FROM messages")
    if cursor.fetchone()[0] > 0:
        conn.close()
        return

    messages_data = [
        ("message_1", "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª–∞ –≤ –º–æ–π –±–æ—Ç\n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞ –ì–µ—Ä—Ü\n\n–Ø –Ω–∞—Ç—É—Ä–æ–ø–∞—Ç, –ø–æ–º–æ–≥–∞—é —Ç—ã—Å—è—á–∞–º –∂–µ–Ω—â–∏–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∑–¥–æ—Ä–æ–≤—ã–º–∏ –∏ —Å—Ç—Ä–æ–π–Ω—ã–º–∏ –∏ –≤–ª—é–±–ª—è—Ç—å—Å—è –≤ —Å–≤–æ–µ —Ç–µ–ª–æ –≤–Ω–æ–≤—å, –∏ –≤–Ω–æ–≤—å.\n\n–í —ç—Ç–æ–º –±–æ—Ç–µ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –≥–∞–π–¥–æ–≤ –∏ —É—Ä–æ–∫–æ–≤ üòç\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—èüëç", "/home/ubuntu/upload/image.png"),
        ("message_2", "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º —è –¥–µ–ª—é—Å—å –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∏—Å—Ç–æ—Ç–µ –ø–∏—Ç–∞–Ω–∏—è, —Ç–µ–ª–∞ –∏ —Å–æ–∑–Ω–∞–Ω–∏—è. –ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å –±–µ–∑ –ø–µ—Ä–µ–∫–æ—Å–æ–≤, –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω–æ—Å—Ç–∏ –∏ –≤—ã–ª–∏–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–¥–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ !\n\n–ì–¥–µ –∏ —Ç—ã, –∏ —è –∏–º–µ–µ–º –ø—Ä–∞–≤–æ –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –ø–∏—Ç–∞–Ω–∏–∏, –≤ —Å–ø–æ—Ä—Ç–µ, –≤ –º—ã—Å–ª—è—Ö, –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö - –Ω–æ –≤ —ç—Ç–æ–π –Ω–µ–∏–¥–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –µ—Å—Ç—å –∂–∏–∑–Ω—åüëç\n\n–ê —Ç–∞–∫–∂–µ —Ç—ã –Ω–∞–π–¥–µ—à—å —Ç–∞–º –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ—Å—Ç—ã –∏ –ø–æ–¥–∫–∞—Å—Ç—ã –ø—Ä–æ –ø–∏—Ç–∞–Ω–∏–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ ‚Äî –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∑–Ω–∞–µ—Ç –≥—É–≥–ª, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–π –æ–ø—ã—Ç –∏ –æ–ø—ã—Ç 1000 –∂–µ–Ω—â–∏–Ω, –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø—É—Ç—å –æ—á–∏—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π .\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", None),
        ("message_3", "–í–∏–∂—É –ø–æ–¥–ø–∏—Å–∫—É üíó", None),
        ("message_4", "–ï—Å–ª–∏ —Ç–µ–±–µ 30+, –∞ –≤–µ—Å —Å—Ç–æ–∏—Ç, —Ü–∏–∫–ª —Å–∫–∞—á–µ—Ç, –æ—Ç–µ–∫–∏, –ª–∏—Ü–æ \"–ø–ª—ã–≤—ë—Ç\".\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –±–µ–ª–∫–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –ø–æ–ª–µ–∑–Ω—ã—Ö –∂–∏—Ä–æ–≤, –∑–∞—Å—Ç–æ–µ–º –ª–∏–º—Ñ—ã, –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ–ø—Ä–æ—Ö–æ–¥—è—â–µ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∫–æ—Ä—Ç–∏–∑–æ–ª–∞, –Ω–µ–≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ —Å–µ–±–µ –∏ —Å–≤–æ–µ–º—É —Ç–µ–ª—É, –∏ –ø—Ä.\n\n–Ø —Å–¥–µ–ª–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç (5 –≤–æ–ø—Ä–æ—Å–æ–≤) —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å:\n\n–∫–∞–∫ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–≤–æ–∏ –≥–æ—Ä–º–æ–Ω—ã\n\n–ø–æ–¥–æ–π–¥—ë—Ç –ª–∏ —Ç–µ–±–µ –∫–µ—Ç–æ\n\n–∏ —á—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å –≤—ã—á–∏—Å—Ç–∏—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ üëç\n\n–ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞, —è –≤—ã–¥–∞–º —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ä–∞—Ü–∏–æ–Ω, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ —Ç–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é", None),
        ("test_intro", "üìç–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –∏ —è –ø—Ä–∏—à–ª—é —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç + –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ 3 –¥–Ω—è", None)
    ]

    buttons_data = [
        ("message_2", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", "https://t.me/your_channel_link", None),
        ("message_2", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", None, "check_subscription"),
        ("message_4", "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç ‚Üí", None, "start_test")
    ]

    for msg_id, text, photo_path in messages_data:
        cursor.execute("INSERT INTO messages (message_id, text, photo_path) VALUES (?, ?, ?)", (msg_id, text, photo_path))
    
    for msg_id, text, url, callback_data in buttons_data:
        cursor.execute("INSERT INTO buttons (message_id, text, url, callback_data) VALUES (?, ?, ?, ?)", (msg_id, text, url, callback_data))
    
    conn.commit()
    conn.close()

def get_user_data(user_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, current_question, score, completed, last_result FROM users WHERE id = ?", (user_id,))
    user_data = cursor.fetchone()
    conn.close()
    return user_data

def create_user(user_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (id, current_question, score, completed, last_result) VALUES (?, 0, 0, 0, NULL)", (user_id,))
    conn.commit()
    conn.close()

def update_user_progress(user_id, question_num, score):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET current_question = ?, score = ? WHERE id = ?", (question_num, score, user_id))
    conn.commit()
    conn.close()

def reset_user_progress(user_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET current_question = 0, score = 0 WHERE id = ?", (user_id,))
    conn.commit()
    conn.close()

def complete_user_test(user_id, final_score, result_text):
    """Mark user test as completed with final score and result"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET completed = 1, score = ?, last_result = ?, current_question = 0 WHERE id = ?", 
                   (final_score, result_text, user_id))
    conn.commit()
    conn.close()

def get_message(message_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT text, photo_path FROM messages WHERE message_id = ?", (message_id,))
    message_data = cursor.fetchone()
    conn.close()
    return message_data

def get_buttons_for_message(message_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT text, url, callback_data FROM buttons WHERE message_id = ?", (message_id,))
    buttons_data = cursor.fetchall()
    conn.close()
    return buttons_data

def get_all_users():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, current_question, score, completed, last_result FROM users")
    users = cursor.fetchall()
    conn.close()
    return users

def update_message_text(message_id, new_text):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE messages SET text = ? WHERE message_id = ?", (new_text, message_id))
    conn.commit()
    conn.close()

def update_button(button_id, new_text=None, new_url=None, new_callback_data=None):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    updates = []
    params = []
    if new_text is not None:
        updates.append("text = ?")
        params.append(new_text)
    if new_url is not None:
        updates.append("url = ?")
        params.append(new_url)
    if new_callback_data is not None:
        updates.append("callback_data = ?")
        params.append(new_callback_data)
    
    if updates:
        query = f"UPDATE buttons SET {', '.join(updates)} WHERE button_id = ?"
        params.append(button_id)
        cursor.execute(query, tuple(params))
        conn.commit()
    conn.close()

def add_button(message_id, text, url=None, callback_data=None):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO buttons (message_id, text, url, callback_data) VALUES (?, ?, ?, ?)", (message_id, text, url, callback_data))
    conn.commit()
    conn.close()

def delete_button(button_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM buttons WHERE button_id = ?", (button_id,))
    conn.commit()
    conn.close()




def get_all_messages():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT message_id, text, photo_path FROM messages")
    messages = cursor.fetchall()
    conn.close()
    return messages

def clean_duplicate_buttons():
    """Remove duplicate buttons based on message_id, text, url, and callback_data"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    # Find duplicates and keep only the first occurrence
    cursor.execute("""
        DELETE FROM buttons 
        WHERE button_id NOT IN (
            SELECT MIN(button_id) 
            FROM buttons 
            GROUP BY message_id, text, COALESCE(url, ''), COALESCE(callback_data, '')
        )
    """)
    
    deleted_count = cursor.rowcount
    conn.commit()
    conn.close()
    return deleted_count

def get_all_buttons():
    """Get all buttons with their message information"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT b.button_id, b.message_id, b.text, b.url, b.callback_data, m.text as message_text
        FROM buttons b
        LEFT JOIN messages m ON b.message_id = m.message_id
        ORDER BY b.message_id, b.button_id
    """)
    buttons = cursor.fetchall()
    conn.close()
    return buttons

def add_message(message_id, text, photo_path=None):
    """Add a new message"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO messages (message_id, text, photo_path) VALUES (?, ?, ?)", 
                   (message_id, text, photo_path))
    conn.commit()
    conn.close()

def delete_message(message_id):
    """Delete a message and all its buttons"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    # Delete associated buttons first
    cursor.execute("DELETE FROM buttons WHERE message_id = ?", (message_id,))
    # Delete the message
    cursor.execute("DELETE FROM messages WHERE message_id = ?", (message_id,))
    conn.commit()
    conn.close()

def get_button_by_id(button_id):
    """Get button details by ID"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT button_id, message_id, text, url, callback_data FROM buttons WHERE button_id = ?", (button_id,))
    button = cursor.fetchone()
    conn.close()
    return button





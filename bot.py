import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, ConversationHandler
import db

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# Replace with your actual bot token and admin ID
BOT_TOKEN = "8025187931:AAGsFR7T7rDU0ati-Mo3wMR4BBBzFr6caNM"
ADMIN_ID = 7470811680

# Test questions and options
QUESTIONS = {
    1: {
        "text": "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç",
        "options": {
            "–¥–æ 30": 20,
            "30‚Äì35": 30,
            "36‚Äì40": 40,
            "41‚Äì45": 50,
            "46+": 60
        }
    },
    2: {
        "text": "–ö–∞–∫ —É —Ç–µ–±—è —Å –≥–æ—Ä–º–æ–Ω–∞–º–∏?",
        "options": {
            "–í—Å—ë —Å—Ç–∞–±–∏–ª—å–Ω–æ": 20,
            "–ü–ú–° —É—Å–∏–ª–∏–ª—Å—è, –æ—Ç—ë–∫–∏, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ": 40,
            "–ù–∞—á–∞–ª–∏—Å—å —Å–±–æ–∏, –ø—Ä—ã–≥–∞–µ—Ç —Ü–∏–∫–ª": 50,
            "–£–∂–µ –º–µ–Ω–æ–ø–∞—É–∑–∞ / –±–ª–∏–∑–∫–æ": 60
        }
    },
    3: {
        "text": "–ö–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å –ø–∏—Ç–∞–µ—à—å—Å—è?",
        "options": {
            "–ó–û–ñ, –Ω–æ –≤–µ—Å –Ω–µ —É—Ö–æ–¥–∏—Ç": 40,
            "–ß–∞—Å—Ç–æ —Å—Ä—ã–≤—ã": 30,
            "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –≥–æ–ª–æ–¥–Ω–∞—è": 50,
            "–ï–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ —Ç—è–∂–µ—Å—Ç—å": 50
        }
    },
    4: {
        "text": "–ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–∏—Ç?",
        "options": {
            "–õ–∏—Ü–æ —Å—Ç–∞–ª–æ \"–ø—É—Ö–ª—ã–º\"": 40,
            "–í–µ—Å –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ –∂–∏–≤–æ—Ç–µ": 50,
            "–°–∏–ª –Ω–µ—Ç": 50,
            "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–µ—Ä–µ–ø–∞–¥—ã –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏": 50,
            "–ü–∞–¥–∞–µ—Ç –ª–∏–±–∏–¥–æ": 40,
            "–í—Å—ë –≤–º–µ—Å—Ç–µ üò©": 60
        }
    },
    5: {
        "text": "–ü—Ä–æ–±–æ–≤–∞–ª–∞ –ª–∏ —Ç—ã –∫–µ—Ç–æ —Ä–∞–Ω—å—à–µ?",
        "options": {
            "–î–∞, –Ω–æ –Ω–µ –∑–∞—à–ª–æ": 20,
            "–ù–∏–∫–æ–≥–¥–∞": 30,
            "–•–æ—á—É, –Ω–æ –±–æ—é—Å—å": 40,
            "–ü—Ä–æ–±–æ–≤–∞–ª–∞ ‚Äî –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å": 60
        }
    }
}

RESULTS = [
    (100, 130, "60%: ‚Äú–ö–µ—Ç–æ —Ç–µ–±–µ –ø–æ–¥–æ–π–¥—ë—Ç ! –û–Ω–æ –±—É–¥–µ—Ç —Ç–µ–±–µ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–±–æ–µ–≤ –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –≤–µ—Å–∞."),
    (131, 170, "70%: ‚Äú–ï—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è, —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –º—è–≥–∫–∏–π –≤—Ö–æ–¥ . –õ–æ–≤–∏ —Ä–∞—Ü–∏–æ–Ω –Ω–∞ 3 –¥–Ω—è ! |"),
    (171, 200, "80%: ‚Äú–ö–µ—Ç–æ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç ‚Äî —Ç–≤–æ–∏ —Å–∏–º–ø—Ç–æ–º—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∏–Ω—Å—É–ª–∏–Ω–æ—Ä–µ–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ –¥–µ—Ñ–∏—Ü–∏—Ç –∂–∏—Ä–æ–≤.‚Äù"),
    (201, 230, "90%: ‚Äú–¢–µ–±–µ –ø—Ä—è–º–æ–π –ø—É—Ç—å –Ω–∞ –∂–µ–Ω—Å–∫–æ–µ –∫–µ—Ç–æ. –û—Ä–≥–∞–Ω–∏–∑–º –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.‚Äù"),
    (231, float("inf"), "100%: ‚Äú–£ —Ç–µ–±—è –ø–æ—á—Ç–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ ‚Äò–≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–ª–æ—Å—Ç–∏‚Äô. –ö–µ—Ç–æ + –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ = üî•")
]

# States for admin panel conversation
ADMIN_MENU, EDIT_MESSAGE_TEXT, EDIT_BUTTON_TEXT, EDIT_BUTTON_URL, EDIT_BUTTON_CALLBACK = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a welcome message and the initial photo."""
    user_id = update.effective_user.id
    db.create_user(user_id)

    message_data = db.get_message("message_1")
    if message_data:
        text, photo_path = message_data
        if photo_path:
            await update.message.reply_photo(photo=photo_path, caption=text)
        else:
            await update.message.reply_text(text)

    await send_message_from_db("message_2", update.message)

async def send_message_from_db(message_id: str, message_obj) -> None:
    message_data = db.get_message(message_id)
    buttons_data = db.get_buttons_for_message(message_id)

    if message_data:
        text, photo_path = message_data
        keyboard = []
        for btn_text, btn_url, btn_callback_data in buttons_data:
            if btn_url:
                keyboard.append([InlineKeyboardButton(btn_text, url=btn_url)])
            elif btn_callback_data:
                keyboard.append([InlineKeyboardButton(btn_text, callback_data=btn_callback_data)])
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

        if photo_path:
            await message_obj.reply_photo(photo=photo_path, caption=text, reply_markup=reply_markup)
        else:
            await message_obj.reply_text(text, reply_markup=reply_markup)

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles the subscription check button."""
    query = update.callback_query
    await query.answer()
    # For now, always positive result as per TZ
    message_data = db.get_message("message_3")
    if message_data:
        text, _ = message_data
        await query.edit_message_text(text)
    await send_message_from_db("message_4", query.message)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handles the /admin command."""
    if update.effective_user.id == ADMIN_ID:
        keyboard = [
            [InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏—è", callback_data="admin_messages")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return ADMIN_MENU
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    users = db.get_all_users()
    response_text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:\n\n"
    if users:
        for user_id, current_question, score in users:
            result_text = "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
            if current_question == len(QUESTIONS): # Check if all questions were answered
                for min_score, max_score, text in RESULTS:
                    if min_score <= score <= max_score:
                        result_text = text
                        break
            response_text += f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, –ë–∞–ª–ª—ã: {score}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}\n"
    else:
        response_text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    await query.edit_message_text(response_text)
    return ADMIN_MENU

async def admin_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    messages = db.get_all_messages()
    keyboard = []
    response_text = "–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
    if messages:
        for msg_id, text, _ in messages:
            response_text += f"ID: {msg_id}, –¢–µ–∫—Å—Ç: {text[:50]}...\n"
            keyboard.append([InlineKeyboardButton(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {msg_id}", callback_data=f"admin_edit_message_{msg_id}")])
    else:
        response_text += "–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_add_message")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(response_text, reply_markup=reply_markup)
    return ADMIN_MENU

async def admin_edit_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    message_id = query.data.replace("admin_edit_message_", "")
    context.user_data["editing_message_id"] = message_id
    message_data = db.get_message(message_id)
    if message_data:
        text, _ = message_data
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}:\n\n–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n{text}")
        return EDIT_MESSAGE_TEXT
    else:
        await query.edit_message_text("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ADMIN_MENU

async def receive_edited_message_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message_id = context.user_data.get("editing_message_id")
    if message_id:
        new_text = update.message.text
        db.update_message_text(message_id, new_text)
        del context.user_data["editing_message_id"]
        await update.message.reply_text(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –æ–±–Ω–æ–≤–ª–µ–Ω.")
        # Go back to admin messages menu
        messages = db.get_all_messages()
        keyboard = []
        response_text = "–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
        if messages:
            for msg_id, text, _ in messages:
                response_text += f"ID: {msg_id}, –¢–µ–∫—Å—Ç: {text[:50]}...\n"
                keyboard.append([InlineKeyboardButton(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {msg_id}", callback_data=f"admin_edit_message_{msg_id}")])
        else:
            response_text += "–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_add_message")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(response_text, reply_markup=reply_markup)
        return ADMIN_MENU
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return ADMIN_MENU

async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Starts the test."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    db.reset_user_progress(user_id)
    message_data = db.get_message("test_intro")
    if message_data:
        text, _ = message_data
        await query.edit_message_text(text)
    await send_question(query.message, context, user_id)

async def send_question(message, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    user_data = db.get_user_data(user_id)
    current_question_num = user_data[1] + 1 # current_question is 0-indexed in DB

    if current_question_num > len(QUESTIONS):
        await send_result(message, context, user_id)
        return

    question = QUESTIONS[current_question_num]
    keyboard = []
    for option_text, score_value in question["options"].items():
        keyboard.append([InlineKeyboardButton(option_text, callback_data=f"q_{current_question_num}_{score_value}")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await message.reply_text(f"–í–æ–ø—Ä–æ—Å {current_question_num}: {question['text']}", reply_markup=reply_markup)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_data = db.get_user_data(user_id)
    current_question_num = user_data[1]
    current_score = user_data[2]

    callback_data = query.data.split("_")
    question_answered = int(callback_data[1])
    score_gained = int(callback_data[2])

    if question_answered == current_question_num + 1: # Ensure user answers the current question
        new_score = current_score + score_gained
        db.update_user_progress(user_id, current_question_num + 1, new_score)
        await send_question(query.message, context, user_id)
    else:
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å.")

async def send_result(message, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    user_data = db.get_user_data(user_id)
    final_score = user_data[2]

    result_message = ""
    for min_score, max_score, text in RESULTS:
        if min_score <= final_score <= max_score:
            result_message = text
            break
    
    await message.reply_text(f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_score} –±–∞–ª–ª–æ–≤.\n\n{result_message}")
    # Mark test as completed instead of resetting progress
    db.complete_user_test(user_id, final_score, result_message)

def main() -> None:
    """Start the bot."""
    db.init_db() # Initialize the database
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("admin", admin_panel)],
        states={
            ADMIN_MENU: [
                CallbackQueryHandler(admin_users, pattern="^admin_users$"),
                CallbackQueryHandler(admin_messages, pattern="^admin_messages$"),
            ],
            EDIT_MESSAGE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_edited_message_text)],
        },
        fallbacks=[CommandHandler("admin", admin_panel)], # Allow re-entering admin panel
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(admin_edit_message, pattern="^admin_edit_message_.*"))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(check_subscription, pattern="^check_subscription$"))
    application.add_handler(CallbackQueryHandler(start_test, pattern="^start_test$"))
    application.add_handler(CallbackQueryHandler(handle_answer, pattern="^q_\d+_\d+$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start)) # Fallback for any text message

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()


